<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spring on GAJ-Blog</title>
        <link>https://example.com/tags/spring/</link>
        <description>Recent content in Spring on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Sun, 15 Sep 2024 16:02:00 +0800</lastBuildDate><atom:link href="https://example.com/tags/spring/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>spring</title>
        <link>https://example.com/p/spring/</link>
        <pubDate>Sun, 15 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/spring/</guid>
        <description>&lt;h1 id=&#34;q1&#34;&gt;Q1
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Web 程序总是由 Servlet 容器创建，那么在一个 Web 程序中，那么，Spring 容器应该由谁创建？在什么时候创建？Spring 容器中的 Controller 又是如何通过 Servlet 调用的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Web应用中启动Spring容器有很多种方法，可以通过Listener启动，也可以通过Servlet启动，可以使用XML配置，也可以使用注解配置。这里，我们只介绍一种&lt;em&gt;最简单&lt;/em&gt;的启动Spring容器的方式。&lt;/p&gt;
&lt;p&gt;第一步，我们在&lt;code&gt;web.xml&lt;/code&gt;中配置Spring MVC提供的&lt;code&gt;DispatcherServlet&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;dispatcher&lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextClass&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;com.itranswarp.learnjava.AppConfig&lt;span class=&#34;nt&#34;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;dispatcher&lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&#34;nt&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;初始化参数&lt;code&gt;contextClass&lt;/code&gt;指定使用注解配置的&lt;code&gt;AnnotationConfigWebApplicationContext&lt;/code&gt;，配置文件的位置参数&lt;code&gt;contextConfigLocation&lt;/code&gt;指向&lt;code&gt;AppConfig&lt;/code&gt;的完整类名，最后，把这个Servlet映射到&lt;code&gt;/*&lt;/code&gt;，即处理所有URL。&lt;/p&gt;
&lt;p&gt;上述配置可以看作一个样板配置，有了这个配置，Servlet容器会首先初始化Spring MVC的&lt;code&gt;DispatcherServlet&lt;/code&gt;，在&lt;code&gt;DispatcherServlet&lt;/code&gt;启动时，它根据配置&lt;code&gt;AppConfig&lt;/code&gt;创建了一个类型是&lt;code&gt;WebApplicationContext&lt;/code&gt;的IoC容器，完成所有Bean的初始化，并将容器绑到&lt;code&gt;ServletContext&lt;/code&gt;上。&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;DispatcherServlet&lt;/code&gt;持有IoC容器，能从IoC容器中获取所有&lt;code&gt;@Controller&lt;/code&gt;的Bean，因此，&lt;code&gt;DispatcherServlet&lt;/code&gt;接收到所有HTTP请求后，根据Controller方法配置的路径，就可以正确地把请求转发到指定方法，并根据返回的&lt;code&gt;ModelAndView&lt;/code&gt;决定如何渲染页面。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Spring IoC</title>
        <link>https://example.com/p/spring-ioc/</link>
        <pubDate>Thu, 12 Sep 2024 16:02:00 +0800</pubDate>
        
        <guid>https://example.com/p/spring-ioc/</guid>
        <description>&lt;h1 id=&#34;spring-ioc&#34;&gt;Spring IoC
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>Filter &amp; DispatcherServlet &amp; Interceptor</title>
        <link>https://example.com/p/filter-dispatcherservlet-interceptor/</link>
        <pubDate>Sun, 25 Aug 2024 08:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/filter-dispatcherservlet-interceptor/</guid>
        <description>&lt;h1 id=&#34;filter--dispatcherservlet--interceptor&#34;&gt;Filter &amp;amp; DispatcherServlet &amp;amp; Interceptor
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Filter 过滤器，它是 JavaEE 的 Servlet 规范提供的一种组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Http 请求到达 Servlet 之前&lt;/strong&gt;，可以被一个或多个 Filter 预处理，主要是做的一些代码的&lt;strong&gt;公共逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用链&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多个 Filter 是具有&lt;strong&gt;调用链&lt;/strong&gt;的存在的，每个请求都会被链上的 Filter 依次处理，需要在 web.xml 中配置它们的顺序。&lt;/p&gt;
&lt;p&gt;Filter 可以有针对性地&lt;strong&gt;拦截或者放行&lt;/strong&gt; HTTP 请求，如果在 Filter 内部直接发送重定向，且没有调用 chain.doFilter() ，后续的 Filter 就不会在处理这个请求了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DispatcherServlet 它是 MVC 框架中用来接收所有请求的 Servlet，总是映射到 /&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DispatcherServlet 在接收到一个 Request 之后，会根据 Controller 的注解来决定调用哪个方法（需要先通过反射获取 Controller 的实例、get 或 post 方法、方法的参数类型、方法的参数名称），并获得方法返回的 ModelAndView ，或方法内部已经自行处理完毕，返回的就是 null&lt;/p&gt;
&lt;p&gt;View 使用来给模板引擎指定渲染的模板的，而 Model 是一个 Map&amp;lt;String, Object&amp;gt;，model 会由渲染引擎（如 Pebble 这类引擎）在生成模板的时候通过反射来获取数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interceptor 拦截器，它是 Spring MVC 框架用于拦截 HTTP 请求的逻辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用于请求到 controller 之前、controller 处理请求之后&lt;/p&gt;
&lt;p&gt;作用范围比 Filter 更小，更加精细&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
