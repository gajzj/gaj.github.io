<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>多线程 on GAJ-Blog</title>
        <link>https://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <description>Recent content in 多线程 on GAJ-Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>gajzj</copyright>
        <lastBuildDate>Sun, 01 Sep 2024 21:52:54 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>多线程</title>
        <link>https://example.com/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
        <pubDate>Sun, 01 Sep 2024 21:52:54 +0800</pubDate>
        
        <guid>https://example.com/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;多线程&#34;&gt;多线程
&lt;/h1&gt;&lt;h2 id=&#34;线程&#34;&gt;线程
&lt;/h2&gt;&lt;h3 id=&#34;创建线程&#34;&gt;创建线程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;继承 Thread 类，重写 run 方法，然后创建子类对象调用 start() 方法&lt;/li&gt;
&lt;li&gt;实现 Runnable 接口，重写 run 方法，然后创建实现类对象并传递给一个 Thread，调用 start()&lt;/li&gt;
&lt;li&gt;实现 Callable 接口，重写 call 方法，然后创建实现类对象并传递给一个 FutureTask 类对象，最后传递给一个 Thread 对象调用 start()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程的六种状态&#34;&gt;线程的六种状态
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NEW 新建状态&lt;/li&gt;
&lt;li&gt;RUNNABLE 可运行状态，线程调用 start() 方法后即处于这个状态&lt;/li&gt;
&lt;li&gt;BLOCKED 锁阻塞状态，没有获取到锁即处于这个状态&lt;/li&gt;
&lt;li&gt;WAITING 无线等待状态，线程执行时被调用了 wait() 方法处于这个状态&lt;/li&gt;
&lt;li&gt;TIMED_WAITING 计时等待状态，线程执行时被调用了 sleep(ms) 或 wait(ms) 方法即处于这个状态&lt;/li&gt;
&lt;li&gt;TERMINATED 终止状态，线程执行完毕或遇到异常即处于这个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程池&#34;&gt;线程池
&lt;/h2&gt;&lt;h3 id=&#34;threadpoolexcutor&#34;&gt;ThreadPoolExcutor
&lt;/h3&gt;&lt;p&gt;线程池内部使用 AtomicTnteger 来维护 runState(运行状态) 和 workerCount(线程数量)
&lt;strong&gt;用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顶层接口是 Excutor&lt;/p&gt;
&lt;h3 id=&#34;线程池的五种运行状态&#34;&gt;线程池的五种运行状态
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RUNNING 能接受新提交的任务，并且也能处理阻塞队列中的任务&lt;/li&gt;
&lt;li&gt;SHUTDOWN 关闭状态，不再接受新提交的任务，但可以继续处理阻塞队列中保存的任务&lt;/li&gt;
&lt;li&gt;STOP 不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程&lt;/li&gt;
&lt;li&gt;TIDYING 所有的任务都终止了，workerCount(有效线程数)为0&lt;/li&gt;
&lt;li&gt;TERMINATED 在 terminated() 方法执行完后加入该状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线程池实现原理及其在美团业务中的实践 - 美团技术团队 (meituan.com)&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
