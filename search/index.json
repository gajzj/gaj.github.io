[{"content":"测试文章 测试内容\n测试 toc 自动生成目录1 测试 toc 自动生成多级目录（二级目录） 测试 toc 自动生成多级目录（三级目录） 多级目录最多三层\n测试 toc 自动生成目录2 下面是图片↓↓↓↓↓↓↓↓↓↓↓↓\n上面是图片↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n图片中间不能有空格\n测试图片上传方案 测试代码块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /* 读取配置文件 使用 @PropertySource(\u0026#34;app.properties\u0026#34;) 自动读取配置文件，Spring 容器看到这个注解后，自动读取这个配置文件 */ @Configuration @ComponentScan @PropertySource(\u0026#34;app.properties\u0026#34;) // 表示读取 classpath 的 app.properties @PropertySource(\u0026#34;smtp.properties\u0026#34;) public class AppConfig { @SuppressWarnings(\u0026#34;resource\u0026#34;) public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); UserService userService = context.getBean(UserService.class); userService.login(\u0026#34;bob@example.com\u0026#34;, \u0026#34;password\u0026#34;); Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;ada\u0026#34;, 2); map.put(\u0026#34;awui\u0026#34;, 1); map.put(\u0026#34;dawcf\u0026#34;, 3); map.put(\u0026#34;afafds\u0026#34;, 4); for (Map.Entry\u0026lt;String, Integer\u0026gt; entry : map.entrySet()) { System.out.println(entry.getKey() + entry.getValue()); } } /* 注入的字符串语法 1.\u0026#34;${app.zone}\u0026#34; 表示读取 key 为 app.zone 的 value，如果 key 不存在，启动将报错 2.\u0026#34;${app.zone:Z}\u0026#34; 表示读取 key 为 app.zone 的 value，如果 key 不存在，就用使用默认值 */ @Bean ZoneId createZoneId(@Value(\u0026#34;${app.zone:Z}\u0026#34;) String zoneId) { return ZoneId.of(zoneId); } } ","date":"2024-08-25T09:52:54+08:00","image":"https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87_hu6886787404485992962.png","permalink":"https://example.com/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","title":"测试文章"},{"content":"Cookie Cookie是另一种在Web应用中保持状态的机制，但与session不同的是，cookie存储在客户端，而不是服务器端。以下是cookie的详细介绍：\n1. Cookie的工作原理 存储位置: cookie存储在客户端的浏览器中，由浏览器管理。 传递机制: 每次客户端发送HTTP请求时，浏览器会自动将相关的cookie信息添加到请求头中发送给服务器。这些cookie可以包含各种数据，如用户ID、偏好设置等。 2. Cookie的创建和使用 设置Cookie:\n服务器通过HTTP响应头中的Set-Cookie指令来设置cookie。\n例如：\n1 2 3 Cookie cookie = new Cookie(\u0026#34;username\u0026#34;, \u0026#34;Alice\u0026#34;); cookie.setMaxAge(60 * 60); // 设置cookie的生命周期为1小时 response.addCookie(cookie); 这段代码在服务器响应时，告诉客户端保存一个名为\u0026quot;username\u0026quot;、值为\u0026quot;Alice\u0026quot;的cookie，并设定这个cookie的有效期为1小时。\n读取Cookie:\n服务器可以通过HttpServletRequest对象读取客户端发送的cookie。\n例如：\n1 2 3 4 5 6 7 8 9 Cookie[] cookies = request.getCookies(); if (cookies != null) { for (Cookie c : cookies) { if (\u0026#34;username\u0026#34;.equals(c.getName())) { String username = c.getValue(); // 使用username进行后续操作 } } } 这段代码获取客户端发送的所有cookie，并从中找到名为\u0026quot;username\u0026quot;的cookie，然后提取其值。\n3. Cookie与Session的区别 存储位置: Session存储在服务器端（内存、数据库、文件等）。 Cookie存储在客户端（浏览器）。 生命周期: Session的生命周期通常与客户端会话相关联，且可以配置为持久化或基于时间过期。 Cookie的生命周期由服务器通过Max-Age或Expires属性指定。如果不设置，cookie会在浏览器关闭后失效。 安全性: Session数据在服务器端保存，客户端无法直接访问或篡改，安全性较高。 Cookie数据保存在客户端，虽然可以设置为HttpOnly（仅供服务器读取）或Secure（仅在HTTPS下传输），但仍然容易受到客户端篡改或窃取的风险。 典型用途: Session通常用于存储用户的会话数据（如登录状态），在多个请求之间保持状态。 Cookie可以用于在客户端存储小型数据，如用户偏好、会话ID等。 4. Session与Cookie的关系 通常，session和cookie是一起使用的。为了在多个请求之间识别用户的session，服务器会创建一个session ID，并通过cookie发送给客户端。 每次客户端发送请求时，浏览器会将session ID的cookie返回给服务器，服务器通过这个session ID找到对应的session，从而维持会话状态。 总结 Cookie: 存储在客户端，由服务器通过Set-Cookie设置。每次请求时，浏览器会自动发送相关cookie。 Session: 存储在服务器端，用于管理与特定用户的会话状态。通常通过session ID来关联客户端和服务端的会话。 Cookie和session各有其用途，通常根据应用需求选择最适合的方式来管理用户状态。\n","date":"2024-08-25T08:52:54+08:00","permalink":"https://example.com/p/cookie/","title":"Cookie"},{"content":"Filter \u0026amp; DispatcherServlet \u0026amp; Interceptor Filter 过滤器，它是 JavaEE 的 Servlet 规范提供的一种组件\n作用\n在 Http 请求到达 Servlet 之前，可以被一个或多个 Filter 预处理，主要是做的一些代码的公共逻辑。\n调用链\n多个 Filter 是具有调用链的存在的，每个请求都会被链上的 Filter 依次处理，需要在 web.xml 中配置它们的顺序。\nFilter 可以有针对性地拦截或者放行 HTTP 请求，如果在 Filter 内部直接发送重定向，且没有调用 chain.doFilter() ，后续的 Filter 就不会在处理这个请求了\nDispatcherServlet 它是 MVC 框架中用来接收所有请求的 Servlet，总是映射到 /\nDispatcherServlet 在接收到一个 Request 之后，会根据 Controller 的注解来决定调用哪个方法（需要先通过反射获取 Controller 的实例、get 或 post 方法、方法的参数类型、方法的参数名称），并获得方法返回的 ModelAndView ，或方法内部已经自行处理完毕，返回的就是 null\nView 使用来给模板引擎指定渲染的模板的，而 Model 是一个 Map\u0026lt;String, Object\u0026gt;，model 会由渲染引擎（如 Pebble 这类引擎）在生成模板的时候通过反射来获取数据\nInterceptor 拦截器，它是 Spring MVC 框架用于拦截 HTTP 请求的逻辑\n作用于请求到 controller 之前、controller 处理请求之后\n作用范围比 Filter 更小，更加精细\n","date":"2024-08-25T08:52:54+08:00","permalink":"https://example.com/p/filter-dispatcherservlet-interceptor/","title":"Filter \u0026 DispatcherServlet \u0026 Interceptor"},{"content":"Session session用于指代服务器将数据存储在当前用户的会话中，这个session是由服务端保存的，具体来说，它是一个HttpSession类，我们在获取的时候是由HttpServletRequest.getSession()这样获取到当前用户的session，通过唯一表示符JSESSIONID在服务端区分。\n客户端只会保存JSESSIONID，服务端通过这个id查找到对应的session。\n服务端通过setAttribute()和getAttribute()来读或写session存储的属性及其值\n但是，HttpServletRequest在响应完请求后就会销毁，说明这个Session不是由HttpServletRequest，而是由tomcat的相关组件来处理的：\norg.apache.catalina.session.StandardSession:\nStandardSession是Tomcat中表示会话的类。每个会话对象都由这个类的一个实例表示，StandardSession对象包含了会话的所有数据，包括会话ID、会话属性（如user、name）、创建时间、最后访问时间等。 org.apache.catalina.session.StandardManager:\nStandardManager是Tomcat的默认会话管理器，它负责创建、查找、删除和持久化StandardSession对象。 当你通过HttpServletRequest.getSession()获取会话时，Tomcat实际上是通过StandardManager查找或创建一个StandardSession对象。 org.apache.catalina.Context:\nContext对象代表一个Web应用的上下文。在每个Context对象中，有一个Manager（即StandardManager）实例来管理该上下文的所有会话。 工作流程概述 创建会话: 当客户端第一次请求并调用HttpServletRequest.getSession()时，如果没有现有的会话，Tomcat会通过StandardManager创建一个新的StandardSession对象并返回。 这个新创建的会话对象会被StandardManager保存，以便在后续请求中使用。 管理会话生命周期: StandardManager会定期检查会话是否过期，并销毁过期的会话。 如果应用程序或服务器设置了持久化配置，StandardManager还可以将会话数据序列化到文件系统中，以便在服务器重启后恢复。 会话存储: 默认情况下，session数据存储在Tomcat服务器的内存中。StandardManager会持有所有活动会话的引用，并在Tomcat运行期间负责管理它们。 会话在Tomcat中的持有者 因此，在Tomcat中，HttpSession对象是由StandardSession类表示的，而这些会话对象由StandardManager持有和管理。即使HttpServletRequest对象被销毁，StandardSession对象依然存在于StandardManager中，直到会话超时或被显式销毁。\n如果Tomcat重启，默认情况下，保存在内存中的session会消失。这意味着如果没有特殊配置，当Tomcat重新启动时，所有活跃的session数据都会丢失，用户会话将被中断，用户需要重新登录或重新建立会话。\n持久化会话数据的方法 为了在Tomcat重启后保留session数据，可以使用以下方法：\n启用session持久化:\nTomcat提供了会话持久化的功能，可以将session数据序列化到磁盘上，并在服务器重启时重新加载。 这通过StandardManager的持久化机制来实现。你可以在\u0026lt;Context\u0026gt;配置中启用session持久化。 示例配置（在conf/context.xml或Web应用的META-INF/context.xml中）：\n1 \u0026lt;Manager pathname=\u0026#34;session.ser\u0026#34;/\u0026gt; 这里的pathname属性指定了会话数据文件的路径。如果不指定路径，Tomcat将默认保存会话数据到work目录下的session.ser文件中。 使用外部持久化存储:\n可以将session数据存储在外部数据库、Redis、Memcached等持久化存储中。通过这种方式，即使Tomcat重启，会话数据也能持久存在。 这需要自定义Manager类或者使用第三方的解决方案，例如使用RedisSessionManager来将session数据保存在Redis中。 总结 默认情况下，Tomcat重启后，session数据会丢失，因为它们存储在内存中。\n启用持久化 或 使用 外部存储 是保留session数据的两种常见方法。如果需要在重启后保持会话，建议配置持久化或者使用外部存储机制。\n","date":"2024-08-25T08:52:54+08:00","permalink":"https://example.com/p/session/","title":"Session"}]